// COPYRIGHT Dassault Systemes 2021
//===================================================================
//
// SIVEStateChartCommandGSM.cpp
// Provide implementation to interface
//    CATIShapeDesignWorkshopAddin
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//  Jun 2021  Creation: Code generated by the CAA wizard  Mahez
//===================================================================
#include "SIVEStateChartCommandGSM.h"
#include "CATCreateWorkshop.h" 
#include "CATCommandHeader.h"   
#include "CATIWorkbenchAddin.h"
#include "CATCmdContainer.h"


MacDeclareHeader (MyHeader);
 
CATImplementClass(SIVEStateChartCommandGSM,
                  DataExtension,
                  CATBaseUnknown,
                  SIVStateChartCommandGSM );
 

//-----------------------------------------------------------------------------
// SIVEStateChartCommandGSM : constructor
//-----------------------------------------------------------------------------
SIVEStateChartCommandGSM::SIVEStateChartCommandGSM():
    CATBaseUnknown()
{
}

//-----------------------------------------------------------------------------
// SIVEStateChartCommandGSM : destructor
//-----------------------------------------------------------------------------
SIVEStateChartCommandGSM::~SIVEStateChartCommandGSM()
{
}
 
// Link the implementation to its interface
// ---------------------------------------



//TIE or TIEchain definitions
#include "TIE_CATIShapeDesignWorkshopAddin.h"
TIE_CATIShapeDesignWorkshopAddin( SIVEStateChartCommandGSM);


//Methods implementation


void SIVEStateChartCommandGSM::CreateCommands()
{

	new MyHeader( "HeaderID1","SIVGSMCommandClassMod","SIVGSMCommand",(void*)NULL,CATFrmAvailable);

	new MyHeader( "HeaderID2","SIVGSMCommandClassMod","SIVGSMCommand2",(void*)NULL,CATFrmAvailable);

	new MyHeader( "HeaderID3","SIVGSMCommandClassMod","SIVGSMCommand3",(void*)NULL,CATFrmAvailable);
}

CATCmdContainer * SIVEStateChartCommandGSM::CreateToolbars()
{
	NewAccess (CATCmdContainer, pToolBar, objToolBar);
	NewAccess (CATCmdStarter, pStarter, objStarter);  
	SetAccessCommand (pStarter, "HeaderID1"); 
	SetAccessChild ( pToolBar, pStarter );

    NewAccess (CATCmdStarter, pStarter1, objStarter1);  
	SetAccessCommand (pStarter1, "HeaderID2"); 
	SetAccessNext ( pStarter, pStarter1 );

	NewAccess (CATCmdStarter, pStarter2, objStarter2);  
	SetAccessCommand (pStarter2, "HeaderID3"); 
	SetAccessNext ( pStarter1, pStarter2 );




	AddToolbarView(pToolBar,1,Right);

	return pToolBar;

}








