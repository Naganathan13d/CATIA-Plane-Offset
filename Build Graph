// COPYRIGHT Dassault Systemes 2021
//===================================================================
//
// SIVGSMCommand2.cpp
// The state chart based command: SIVGSMCommand2
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Jun 2021  Creation: Code generated by the CAA wizard  Mahez
//===================================================================
#include "SIVGSMCommand2.h"
#include "CATIndicationAgent.h"
#include "CATMathPlane.h"

#include "CATCreateExternalObject.h"
#include "CATDiaAction.h"
#include "CATIGSMProceduralView.h"


#include "CATFrmEditor.h"
#include "CATDocument.h"
#include "CATInit.h"
#include "CATIPrtContainer.h"
#include "CATIPrtPart.h"
#include "CATISpecObject.h"
#include "CATICkeParmFactory.h"
#include "CATIGSMExtrude.h"
#include "CATDialogState.h"
#include "CATIGSMFactory.h"
#include "CATIGSMPlaneOffsetPt.h"






#include<iostream.h>
CATCreateClass( SIVGSMCommand2);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
SIVGSMCommand2::SIVGSMCommand2() :
  CATStateCommand ("SIVGSMCommand2", CATDlgEngOneShot, CATCommandModeExclusive), pSelectPlaneAgent(NULL), pSelectPointAgent(NULL)
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat

{
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
SIVGSMCommand2::~SIVGSMCommand2()
{
   if (pSelectPlaneAgent != NULL) 
      pSelectPlaneAgent->RequestDelayedDestruction();
   pSelectPlaneAgent = NULL;

      if (pSelectPointAgent != NULL) 
      pSelectPointAgent->RequestDelayedDestruction();
   pSelectPointAgent = NULL;
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void SIVGSMCommand2::BuildGraph()
{


  // TODO: Define the StateChart 
  // ---------------------------

  CATDialogState * pSelectPlanestate = GetInitialState("SelectPlane");

    CATDialogState * pSelectPointstate = AddDialogState("SelectPoint");

  pSelectPlaneAgent = new CATPathElementAgent("SelectPlaneAgent");

  pSelectPointAgent = new CATPathElementAgent("SelectPointAgent");

  if(!pSelectPlaneAgent)
	  return;
  pSelectPlaneAgent->AddElementType( IID_CATIGSMPlane ); 

    if(!pSelectPointAgent)
	  return;
  pSelectPointAgent->AddElementType( IID_CATIGSMPoint ); 

  pSelectPlanestate->AddDialogAgent(pSelectPlaneAgent);

    pSelectPointstate->AddDialogAgent(pSelectPointAgent);

  CATStateCondition * PSelectPlaneCondition = IsOutputSetCondition( pSelectPlaneAgent );  

  CATDiaAction * PSelectPlaneAction = Action ((ActionMethod) (&SIVGSMCommand2::SelectPlane));

  AddTransition( pSelectPlanestate, pSelectPointstate, PSelectPlaneCondition, PSelectPlaneAction);

    CATStateCondition * PSelectPointCondition = IsOutputSetCondition( pSelectPlaneAgent );  

  CATDiaAction * PSelectPointAction = Action ((ActionMethod) (&SIVGSMCommand2::SelectPoint));

  AddTransition( pSelectPointstate, NULL, PSelectPointCondition, PSelectPointAction);



}


//-------------------------------------------------------------------------
// ActionOne ()
//-----------------------------------------------------------------------

CATBoolean SIVGSMCommand2::SelectPlane()
{
  // TODO: Define the action associated with the transition 
  // ------------------------------------------------------
	if(!pSelectPlaneAgent)
		return FALSE;

	CATBaseUnknown* pProfileBaseUnknown = pSelectPlaneAgent->GetElementValue();

	spPlane = pProfileBaseUnknown;

  return TRUE;
}

CATBoolean SIVGSMCommand2::SelectPoint()
{
  // TODO: Define the action associated with the transition 
  // ------------------------------------------------------
	if(!pSelectPointAgent)
		return FALSE;

	CATBaseUnknown* pProfileBaseUnknown = pSelectPointAgent->GetElementValue();

	spPoint = pProfileBaseUnknown;

	GetPrtContainer();

	if(!spPrtContainer)
		return FALSE;

	CATIGSMFactory_var spGSMFactory = spPrtContainer;

	CATIGSMPlaneOffsetPt_var spPlaneOffset = spGSMFactory->CreatePlaneOffsetPt( spPlane, spPoint ); 

  return TRUE;
}


CATIPrtContainer_var SIVGSMCommand2::GetPrtContainer()
{

	CATFrmEditor *pFrmEditor = NULL;
	pFrmEditor = CATFrmEditor::GetCurrentEditor();
	if(!!pFrmEditor)
	{
		CATDocument *pDocument = NULL;

		pDocument = pFrmEditor->GetDocument();
		if(!!pDocument)
		{
			std::cout<<"Doc is received"<<std::endl;
			CATInit *pInit = NULL;
			HRESULT rc = pDocument->QueryInterface( IID_CATInit, (void**) &pInit);
			if(FAILED (rc) )
			{
				std::cout << "Error" << std::endl;
			}
			/*else if ( SUCCEEDED (rc) )
			{
				pInit*/

			if(!!pInit)
			{
				std::cout<<"Doc is received"<<std::endl;

				CATBaseUnknown* pRootContainer = NULL;

				pRootContainer = pInit->GetRootContainer("CATIPrtContainer");
				pInit->Release();

                CATIPrtContainer *pPrtContainer = (CATIPrtContainer*)pRootContainer;
				if(!!pPrtContainer)
				{

					spPrtContainer = pPrtContainer;
					

					//CATIPrtFactory_var spPrtFactory = spPrtContainer;

					//spPart = spPrtContainer->GetPart();

					return spPrtContainer;
				}
			}
		}
	}
	return NULL_var;
}

void SIVGSMCommand2::InsertInProceduralView(CATISpecObject_var &ispSpecObject)  
{
	CATTry
	{
		if(!ispSpecObject)
			return;
		CATIGSMProceduralView_var spGSMProcView = ispSpecObject;
		if(!!spGSMProcView)
		{
			spGSMProcView->InsertInProceduralView();
			ispSpecObject->Update();
		}
	}
	CATCatch(CATError, pError)
	{
	}
	CATEndTry;
}
